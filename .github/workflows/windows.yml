# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Windows

on:
  workflow_dispatch:

jobs:

  build:

    runs-on: windows-latest  # For a list of available runner types, refer to
          
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.300-preview.22204.3

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2


    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        cd $GITHUB_WORKSPACE
        ls
        cd OpenSee
        ls
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $GITHUB_WORKSPACE\OpenSee -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Build the app
      run: |
        cd $GITHUB_WORKSPACE/OpenSee
        msbuild /restore /t:Publish /p:TargetFramework=net6.0-windows10.0.19041 /p:configuration=Release /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}


    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $GITHUB_WORKSPACE\OpenSee\$env:Signing_Certificate

    - name: Find and Prepare MSIX
      run: |
        cd $GITHUB_WORKSPACE/
        Get-ChildItem -Path ".\" -Include OpenSee*.msix -Recurse | Copy-Item -Destination .\
        get-childitem -Path $dir | where-object { $_.Name -like "OpenSee*.msix" } | %{ rename-item -LiteralPath $_.FullName -NewName "$d`OpenSee.msix" }
        

    - name: Create Release
      # You may pin to the exact commit or the version.
      # uses: ncipollo/release-action@40bb172bd05f266cf9ba4ff965cb61e9ee5f6d01
      uses: ncipollo/release-action@v1.9.0
      with:
        artifacts: "$GITHUB_WORKSPACE/OpenSee.msix"
        artifactContentType: "msix"
        token: ${{ secrets.GITHUB_TOKEN }}